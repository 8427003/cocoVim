"快捷键映射
let mapleader = "\<Space>"

" ---------------------------------------------------
" man.vim: invoked by :Man {name}
source $VIMRUNTIME/ftplugin/man.vim

" ---------------------------------------------------
" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" ---------------------------------------------------
" ex-utility:
Plugin 'exvim/ex-utility'
nnoremap <unique> <silent> <Leader>bd :EXbd<CR>
nnoremap <unique> <silent> <C-l> :EXbn<CR>
nnoremap <unique> <silent> <C-h> :EXbp<CR>
nnoremap <unique> <silent> <C-Tab> :EXbalt<CR>
nnoremap <unique> <silent> <Leader><Tab> :EXsw<CR>
nmap <unique> <silent> <Leader><Esc> :EXgp<CR><ESC>


" ---------------------------------------------------
"vim-airline
Plugin 'bling/vim-airline'
if has('gui_running')
 let g:airline_powerline_fonts = 1
else
 let g:airline_powerline_fonts = 0
endif

let g:airline#extensions#tabline#enabled = 0 " NOTE: When you open lots of buffers and typing text, it is so slow.
let g:airline#extensions#tabline#show_buffers = 1
let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline#extensions#tabline#fnamemod = ':t'
" " let g:airline_section_b = "%{fnamemodify(bufname('%'),':p:.:h').'/'}"
" " let g:airline_section_c = '%t'
" " let g:airline_section_warning = airline#section#create(['whitespace']) " NOTE: airline#section#create has no effect in .vimrc initialize pahse
" " let g:airline_section_warning = '%{airline#util#wrap(airline#extensions#whitespace#check(),0)}'
 let g:airline_section_warning = ''

" ---------------------------------------------------
" ctrlp: invoke by <ctrl-p>
Plugin 'kien/ctrlp.vim'
let g:ctrlp_working_path_mode = ''
let g:ctrlp_match_window = 'bottom,order:ttb,min:30,max:30,results:30'
let g:ctrlp_follow_symlinks = 2
let g:ctrlp_max_files = 0 " Unset cap of 10,000 files so we find everything
let g:ctrlp_cache_dir = $HOME.'/.cache/ctrlp'
nnoremap <unique> <leader>bs :CtrlPBuffer<CR>
let g:ctrlp_regexp = 1

" ---------------------------------------------------
" nerdtree: invoke by :NERDTreeToggle
Plugin 'scrooloose/nerdtree'
let g:NERDTreeWinSize = 30
let g:NERDTreeMouseMode = 1
let g:NERDTreeMapToggleZoom = '<Space>'
let g:NERDTreeMinimalUI=1 "不显示帮助面板
let g:NERDTreeDirArrows=1 "目录箭头 1 显示箭头  0传统+-|号
"autocmd vimenter * NERDTree "自动以当前目录打开tree
nmap nf :NERDTreeFind<CR>"锁定文件对应目录树位置
nmap <F3> :NERDTreeToggle<CR>


" ---------------------------------------------------
" vim-easymotion: invoke by <leader><leader> w,b,e,ge,f,F,h,i,j,k,/
Plugin 'Lokaltog/vim-easymotion'
map ff <Plug>(easymotion-sn)
map <leader>/ <Plug>(easymotion-sn)
omap <leader>/ <Plug>(easymotion-tn)
map <leader>j <Plug>(easymotion-j)
map <leader>k <Plug>(easymotion-k)
map <leader>l <Plug>(easymotion-lineforward)
map <leader>h <Plug>(easymotion-linebackward)
let g:EasyMotion_startofline = 0 " keep cursor colum when JK motion

" ---------------------------------------------------
Plugin 'Valloric/YouCompleteMe'

" ---------------------------------------------------
" ex-showmarks: invoke by m... or <leader>mm, <leader>ma
Plugin 'exvim/ex-showmarks'
" TODO: bootleq/ShowMarks on github is well organized in code, but have lots
" bugs, consider merge his code and fixes the bugs
let g:showmarks_enable = 1
let g:showmarks_include = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
let g:showmarks_ignore_type = 'hqm'

" Hilight lower & upper marks
let g:showmarks_hlline_lower = 1
let g:showmarks_hlline_upper = 0

" ---------------------------------------------------
" searchcompl: invoke by /
Plugin 'exvim/ex-searchcompl'

" ---------------------------------------------------
" ex-colorschemes
Plugin '8427003/vim-colorschemes'


" ---------------------------------------------------
" vim-surround: invoke when you select words and press 's'
Plugin 'tpope/vim-surround'
xmap s <Plug>VSurround

" ---------------------------------------------------
" undotree: invoke by <Leader>u
Plugin 'mbbill/undotree'
nnoremap <leader>u :UndotreeToggle<CR>
let g:undotree_SetFocusWhenToggle=1
let g:undotree_WindowLayout = 4

" NOTE: this will prevent undotree closed then jump to minibufexpl
function! g:CloseUndotree()
    call UndotreeHide()
    call ex#window#goto_edit_window()
endfunction

function g:Undotree_CustomMap()
    if has('gui_running')
        nnoremap <silent> <script> <buffer> <ESC> :call g:CloseUndotree()<CR>
    else
        nnoremap <silent> <script> <buffer> <leader><ESC> :call g:CloseUndotree()<CR>
    endif
endfunction

" ---------------------------------------------------
" tabular: invoke by <leader>= alignment-character
" Plugin 'godlygeek/tabular'
" nmap <Leader>= :Tabularize /=<CR>
" vmap <Leader>= :Tabularize /=<CR>
" nmap <Leader>: :Tabularize /:<CR>
" vmap <Leader>: :Tabularize /:<CR>


" ---------------------------------------------------
" LargeFile
Plugin 'vim-scripts/LargeFile'
let g:LargeFile= 2 " files >= 2MB will use LargeFile rules

" ---------------------------------------------------
Plugin 'ntpeters/vim-better-whitespace'
nnoremap <unique> <leader>w :StripWhitespace<CR>

" ---------------------------------------------------
Plugin 'Yggdroot/indentLine'
let g:indentLine_leadingSpaceChar = '.'
let g:indentLine_leadingSpaceEnabled = 1
let g:indentLine_char = '┆'

" ---------------------------------------------------
" vim-javascript
Plugin 'pangloss/vim-javascript'

" vim-html
" ---------------------------------------------------
Plugin 'exvim/ex-indenthtml.vim'

" ---------------------------------------------------
" vim-less
Plugin 'groenewege/vim-less'



"my add plugins
" ---------------------------------------------------
Plugin 'roman/golden-ratio'



" ---------------------------------------------------
"template
Plugin '8427003/vim-template'

" ---------------------------------------------------
Plugin 'othree/xml.vim' "html closeTag is ok

" ---------------------------------------------------
Plugin 'Raimondi/delimitMate' "() {} 括号匹配 is ok
let delimitMate_expand_cr = 1 "let -R indent
au FileType mail let b:delimitMate_expand_cr = 1
"inoremap <expr> <Tab> <C-Tab>

" ---------------------------------------------------
Plugin 'heavenshell/vim-jsdoc' " 函数注释
nmap <silent> tt <Plug>(jsdoc)

" ---------------------------------------------------
Plugin 'terryma/vim-expand-region'
vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)

" ---------------------------------------------------
Plugin 'vim-scripts/nerdtree-ack'

" ---------------------------------------------------
Plugin 'mileszs/ack.vim'

" ---------------------------------------------------
Plugin 'dkprice/vim-easygrep'

" ---------------------------------------------------
"系统粘贴版
vmap <Leader>y "+y
vmap <Leader>d "+d
nmap <Leader>p "+p
nmap <Leader>P "+P
vmap <Leader>p "+p
vmap <Leader>P "+P

" ---------------------------------------------------
"自动跳转到粘贴文本的最后
vnoremap <silent> y y`]
vnoremap <silent> p p`]
nnoremap <silent> p p`]

" ---------------------------------------------------
"我经常复制一段内容，在 visual 模式下选中一段文本并粘贴来实现替换，
"此时“剪贴板”中的内容会被替换成被删掉的文本，如果想粘贴第二次就很不方便了。
"这个映射解决了这个问题。
function! RestoreRegister()
  let @" = s:restore_reg
  return ''
endfunction
function! s:Repl()
  let s:restore_reg = @"
  return "p@=RestoreRegister()\<cr>"
endfunction
vmap <silent> <expr> p <sid>Repl()

" ---------------------------------------------------
"打开文件目录
function! OpenWithExplorer()
    "let currentPath = expand("%:p:h")
    let currentFile = expand("%:p")
    call system("open".currentFile)
endfunction
command! -nargs=0 Ep call OpenWithExplorer()

" ---------------------------------------------------
"my setting

colorscheme molokai

:set wildmode=list ":tabe 能显示目录树
:set linespace=2 "行间距
:set autochdir "自动设当前编辑的文件所在目录为当前工作路径
 
vnoremap <leader>w <c-w>w
nnoremap <leader>w <c-w>w

" ---------------------------------------------------
" vim:ts=4:sw=4:sts=4 et fdm=marker:
