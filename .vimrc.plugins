"快捷键映射
let mapleader = "\<Space>"

" ---------------------------------------------------
" man.vim: invoked by :Man {name}
source $VIMRUNTIME/ftplugin/man.vim

" ---------------------------------------------------
" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" ---------------------------------------------------
" ex-utility:
Plugin 'exvim/ex-utility'
nnoremap <unique> <silent> <Leader>bd :EXbd<CR>
nnoremap <unique> <silent> <C-l> :EXbn<CR>
nnoremap <unique> <silent> <C-h> :EXbp<CR>
nnoremap <unique> <silent> <C-Tab> :EXbalt<CR>
nnoremap <unique> <silent> <Leader><Tab> :EXsw<CR>
nmap <unique> <silent> <Leader><Esc> :EXgp<CR><ESC>

"---------------------------------------------------
" ex-minibufexpl
 Plugin 'exvim/ex-minibufexpl'
let g:miniBufExplBuffersNeeded = 0
let g:miniBufExplUseSingleClick = 1 " If you would like to single click on tabs rather than double clicking on them to " goto the selected buffer.
let g:miniBufExplMaxSize = 0 " <max lines: default 0> setting this to 0 will mean the window gets as big as needed to fit all your buffers.
let g:miniBufExplTabWrap = 2
"let g:miniBufExplorerAutoStart = 0
" let g:miniBufExplDebugMode  = 3
" let g:miniBufExplDebugLevel = 0

" ---------------------------------------------------
"vim-airline
Plugin 'bling/vim-airline'
if has('gui_running')
 let g:airline_powerline_fonts = 1
else
 let g:airline_powerline_fonts = 0
endif

let g:airline#extensions#tabline#enabled = 0 " NOTE: When you open lots of buffers and typing text, it is so slow.
let g:airline#extensions#tabline#show_buffers = 1
let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline#extensions#tabline#fnamemod = ':t'
" " let g:airline_section_b = "%{fnamemodify(bufname('%'),':p:.:h').'/'}"
" " let g:airline_section_c = '%t'
" " let g:airline_section_warning = airline#section#create(['whitespace']) " NOTE: airline#section#create has no effect in .vimrc initialize pahse
" " let g:airline_section_warning = '%{airline#util#wrap(airline#extensions#whitespace#check(),0)}'
 let g:airline_section_warning = ''

" ---------------------------------------------------
" ctrlp: invoke by <ctrl-p>
Plugin 'kien/ctrlp.vim'
let g:ctrlp_working_path_mode = ''
let g:ctrlp_match_window = 'bottom,order:ttb,min:30,max:30,results:30'
let g:ctrlp_follow_symlinks = 2
let g:ctrlp_max_files = 0 " Unset cap of 10,000 files so we find everything
let g:ctrlp_cache_dir = $HOME.'/.cache/ctrlp'
nnoremap <unique> <leader>bs :CtrlPBuffer<CR>
let g:ctrlp_regexp = 1

" ---------------------------------------------------
" nerdtree: invoke by :NERDTreeToggle
Plugin 'scrooloose/nerdtree'
let g:NERDTreeWinSize = 30
let g:NERDTreeMouseMode = 1
let g:NERDTreeMapToggleZoom = '<Space>'
let g:NERDTreeMinimalUI=1 "不显示帮助面板
let g:NERDTreeDirArrows=1 "目录箭头 1 显示箭头  0传统+-|号
autocmd vimenter * NERDTree "自动以当前目录打开tree
nmap nf :NERDTreeFind<CR>"锁定文件对应目录树位置
nmap <F3> :NERDTreeToggle<CR>


" ---------------------------------------------------
" vim-easymotion: invoke by <leader><leader> w,b,e,ge,f,F,h,i,j,k,/
Plugin 'Lokaltog/vim-easymotion'
map ff <Plug>(easymotion-sn)
map <leader><leader>/ <Plug>(easymotion-sn)
omap <leader><leader>/ <Plug>(easymotion-tn)
map <leader><leader>j <Plug>(easymotion-j)
map <leader><leader>k <Plug>(easymotion-k)
map <leader><leader>l <Plug>(easymotion-lineforward)
map <leader><leader>h <Plug>(easymotion-linebackward)
let g:EasyMotion_startofline = 0 " keep cursor colum when JK motion


" ---------------------------------------------------
" neocomplete: invoke when you insert words
Plugin 'Shougo/neocomplete.vim'
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_smart_case = 1
let g:neocomplete#enable_auto_select = 1 " let neocomplete's completion behavior like AutoComplPop
" " Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" ---------------------------------------------------
" ex-showmarks: invoke by m... or <leader>mm, <leader>ma
Plugin 'exvim/ex-showmarks'
" TODO: bootleq/ShowMarks on github is well organized in code, but have lots
" bugs, consider merge his code and fixes the bugs
let g:showmarks_enable = 1
let g:showmarks_include = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
let g:showmarks_ignore_type = 'hqm'

" Hilight lower & upper marks
let g:showmarks_hlline_lower = 1
let g:showmarks_hlline_upper = 0

" ---------------------------------------------------
" searchcompl: invoke by /
Plugin 'exvim/ex-searchcompl'

" ---------------------------------------------------
" ex-colorschemes
Plugin '8427003/vim-colorschemes'


" ---------------------------------------------------
" vim-surround: invoke when you select words and press 's'
Plugin 'tpope/vim-surround'
xmap s <Plug>VSurround


" ---------------------------------------------------
" generate doc comment template
nmap tt :call GenerateDOCComment()<CR>

function! GenerateDOCComment()
  let l    = line('.')
  let i    = indent(l)
  let pre  = repeat(' ',i)
  let text = getline(l)
  let params   = matchstr(text,'([^)]*)')
  let paramPat = '\([$a-zA-Z_0-9]\+\)[, ]*\(.*\)'
  echomsg params
  let vars = []
  let m    = ' '
  let ml = matchlist(params,paramPat)
  while ml!=[]
    let [_,var;rest]= ml
    let vars += [pre.' * @param  {type} '.var]
    let ml = matchlist(rest,paramPat,0)
  endwhile
  let vars += [pre.' * @return {type} ']
  let comment = [pre.'/**',pre.' * '] + vars + [pre.' */']
  call append(l-1,comment)
  call cursor(l+1,i+3)
endfunction

let g:NERDSpaceDelims = 1
let g:NERDRemoveExtraSpaces = 1
let g:NERDCustomDelimiters = {
            \ 'vimentry': { 'left': '--' },
            \ }
map <unique> <F11> <Plug>NERDCommenterAlignBoth
map <unique> <C-F11> <Plug>NERDCommenterUncomment

" ---------------------------------------------------
" undotree: invoke by <Leader>u
Plugin 'mbbill/undotree'
nnoremap <leader>u :UndotreeToggle<CR>
let g:undotree_SetFocusWhenToggle=1
let g:undotree_WindowLayout = 4

" NOTE: this will prevent undotree closed then jump to minibufexpl
function! g:CloseUndotree()
    call UndotreeHide()
    call ex#window#goto_edit_window()
endfunction

function g:Undotree_CustomMap()
    if has('gui_running')
        nnoremap <silent> <script> <buffer> <ESC> :call g:CloseUndotree()<CR>
    else
        nnoremap <silent> <script> <buffer> <leader><ESC> :call g:CloseUndotree()<CR>
    endif
endfunction

" ---------------------------------------------------
" tabular: invoke by <leader>= alignment-character
Plugin 'godlygeek/tabular'
nmap <Leader>= :Tabularize /=<CR>
vmap <Leader>= :Tabularize /=<CR>
nmap <Leader>: :Tabularize /:<CR>
vmap <Leader>: :Tabularize /:<CR>


" ---------------------------------------------------
" LargeFile
Plugin 'vim-scripts/LargeFile'
let g:LargeFile= 5 " files >= 5MB will use LargeFile rules

" ---------------------------------------------------
Plugin 'ntpeters/vim-better-whitespace'
nnoremap <unique> <leader>w :StripWhitespace<CR>

" emmet-vim
" ---------------------------------------------------
Plugin 'mattn/emmet-vim'
" make sure emmet only enable in html,css files
let g:user_emmet_install_global = 0
autocmd FileType html,css EmmetInstall

" ---------------------------------------------------
Plugin 'Yggdroot/indentLine'
let g:indentLine_leadingSpaceChar = '.'
let g:indentLine_leadingSpaceEnabled = 1
let g:indentLine_char = '┆'

" ---------------------------------------------------
" vim-javascript
Plugin 'pangloss/vim-javascript'

" ---------------------------------------------------
" vim-coffee-script
Plugin 'kchmck/vim-coffee-script'

" vim-html
" ---------------------------------------------------
Plugin 'exvim/ex-indenthtml.vim'

" ---------------------------------------------------
" vim-css3-syntax
Plugin 'hail2u/vim-css3-syntax'

" ---------------------------------------------------
" vim-less
Plugin 'groenewege/vim-less'

" ---------------------------------------------------
" vim-markdown
Plugin 'plasticboy/vim-markdown'
let g:vim_markdown_initial_foldlevel=9999



"my add plugins
" ---------------------------------------------------
"Plugin 'roman/golden-ratio'

" ---------------------------------------------------
"打开文件目录
function! OpenWithExplorer()
    "let currentPath = expand("%:p:h")
    let currentFile = expand("%:p")
    call system("open".currentFile)
endfunction
command! -nargs=0 Ep call OpenWithExplorer()

" ---------------------------------------------------
Plugin 'vim-scripts/Conque-Shell'

let g:ConqueTerm_FastMode = 1
let g:ConqueTerm_StartMessages = 0

" ---------------------------------------------------
"template
Plugin '8427003/vim-template'

" ---------------------------------------------------
Plugin 'othree/xml.vim' "html closeTag is ok

" ---------------------------------------------------
"Plugin 'xolox/vim-misc' "vim-session require
"Plugin 'xolox/vim-session' "重新打开以前打开的
"let g:session_autoload = 'yes' "自动加载会话不提示
"let g:session_autosave = 'yes' "自动保存不提示

" ---------------------------------------------------
Plugin 'Raimondi/delimitMate' "() {} 括号匹配 is ok
let delimitMate_expand_cr = 1 "let -R indent
au FileType mail let b:delimitMate_expand_cr = 1
"inoremap <expr> <Tab> <C-Tab>

" ---------------------------------------------------
Plugin 'hushicai/fecs.vim.git'
" 不建议首次打开文件时进行检查
let g:syntastic_check_on_open = 0
" `:wq`时不进行检查，注意这跟`:w`不一样
let g:syntastic_check_on_wq = 0
" 如果你想在写文件时不进行检查，需要配置`passive`模式
" 在`passive`模式下，只有手动调用了`:SyntasticCheck`才会触发检查
" let g:syntastic_mode_map = {'mode': 'passive'}
" 你可以配置一个快捷方式，用来快速检查当前文件
" nmap <silent> <F5> :SyntasticCheck<cr>
let g:syntastic_javascript_checkers = ['fecs']
let g:syntastic_javascript_fecs_args = "--reporter=baidu"
let g:syntastic_error_symbol = "✗"
let g:syntastic_warning_symbol = "⚠"
vnoremap <unique><silent><leader>l :call FecsFormat()<CR>

" ---------------------------------------------------
Plugin 'terryma/vim-expand-region'
vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)

" ---------------------------------------------------
Plugin 'terryma/vim-multiple-cursors'

" ---------------------------------------------------
Plugin 'vim-scripts/nerdtree-ack'

" ---------------------------------------------------
Plugin 'mileszs/ack.vim'

" ---------------------------------------------------
Plugin 'dkprice/vim-easygrep'

" ---------------------------------------------------
"系统粘贴版
vmap <Leader>y "+y
vmap <Leader>d "+d
nmap <Leader>p "+p
nmap <Leader>P "+P
vmap <Leader>p "+p
vmap <Leader>P "+P

" ---------------------------------------------------
"自动跳转到粘贴文本的最后
vnoremap <silent> y y`]
vnoremap <silent> p p`]
nnoremap <silent> p p`]

" ---------------------------------------------------
"我经常复制一段内容，在 visual 模式下选中一段文本并粘贴来实现替换，
"此时“剪贴板”中的内容会被替换成被删掉的文本，如果想粘贴第二次就很不方便了。
"这个映射解决了这个问题。
function! RestoreRegister()
  let @" = s:restore_reg
  return ''
endfunction
function! s:Repl()
  let s:restore_reg = @"
  return "p@=RestoreRegister()\<cr>"
endfunction
vmap <silent> <expr> p <sid>Repl()


" ---------------------------------------------------
"my setting
":set cursorline
":set autochdir "自动设当前编辑的文件所在目录为当前工作路径
":lcd %:p:h  "自动更改到当前文件所在的目录
colorscheme molokai

" ---------------------------------------------------
function! OpenBash()
    let path = expand("%:p:h")
    let my_terminal = conque_term#open('bash')
    call conque_term#get_instance().writeln("cd ".path)
endfunction

if WINDOWS()
    :cd C:\Users\cocoo.li\Desktop\git
elseif OSX()
    :cd ~/svn
    nmap <Leader><Leader><Leader> :call OpenBash()<CR>
else
    :cd ~/git
endif

" ---------------------------------------------------
" vim:ts=4:sw=4:sts=4 et fdm=marker:
